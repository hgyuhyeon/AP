/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        map<int, TreeNode*> m;
        map<TreeNode*, TreeNode*> parent;
        TreeNode* root;
        for (auto d: descriptions) {
            TreeNode* p, *c;
            if (m[d[0]]) p = m[d[0]];
            else {
                p = new TreeNode(d[0]);
                m[d[0]] = p;
            }
            if (m[d[1]]) c = m[d[1]];
            else {
                c = new TreeNode(d[1]);
                m[d[1]] = c;
            }
            parent[c] = p;
            if (d[2]) p->left = c;
            else p->right = c;
            root = p;
        }

        while (parent[root]) root = parent[root];
        return root;
    }
};
